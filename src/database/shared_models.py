from pydantic import BaseModel, Field, constr, PositiveInt, confloat, conint, ConfigDict
import pycountry
from typing import Optional, Annotated, Dict, Any
from decimal import Decimal
from enum import Enum
import json
import os

from json import JSONEncoder
from decimal import Decimal
from pydantic import HttpUrl, BaseModel

DatetimeStr = Annotated[
    str, Field(pattern=r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?Z$")
]

IdStr = Annotated[
    str,
    Field(
        pattern=r"^[a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}$"
    ),
]

NameStr = Annotated[
    str, Field(min_length=1, max_length=50, pattern=r"^[a-zA-Z\s\-']+$")
]

DateStr = Annotated[
    str, Field(pattern=r"^(19|20)\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$")
]

AddressLineStr = Annotated[
    str,
    Field(
        min_length=1,
        max_length=100,
        pattern=r"^[a-zA-Z0-9\s\-\.,#'ßäöüÄÖÜ]+$",  # Added German characters
    ),
]

CityStr = Annotated[
    str, Field(min_length=1, max_length=100, pattern=r"^[a-zA-Z\s\-']+$")
]

PostcodeStr = Annotated[
    str, Field(pattern=r"^[A-Za-z0-9\s\-]+$", min_length=1, max_length=20)
]

PercentageDecimal = Annotated[Decimal, Field(ge=0, le=1, decimal_places=4)]

AmountDecimal = Annotated[Decimal, Field(ge=0, decimal_places=2)]

PositiveAmount = Annotated[
    PositiveInt, Field(ge=0, le=1_000_000_000_000)  # 1 trillion limit, allowing zero
]

# Integer constraints
NonNegativeInt = Annotated[
    conint(ge=0, le=1_000_000_000_000),  # 1 trillion limit, allowing zero
    Field(description="Amount in smallest currency unit (e.g., cents)"),
]


class Table(BaseModel):
    id: IdStr
    created_at: DatetimeStr
    updated_at: DatetimeStr
    version: conint(ge=1) = Field(default=1)
    is_active: bool = Field(default=True)
    metadata: Dict[str, Any] = Field(default_factory=dict)


class TransactionCategory(str, Enum):
    INCOME = "INCOME"
    TRANSFER_IN = "TRANSFER_IN"
    TRANSFER_OUT = "TRANSFER_OUT"
    LOAN_PAYMENTS = "LOAN_PAYMENTS"
    BANK_FEES = "BANK_FEES"
    ENTERTAINMENT = "ENTERTAINMENT"
    FOOD_AND_DRINK = "FOOD_AND_DRINK"
    GENERAL_MERCHANDISE = "GENERAL_MERCHANDISE"
    HOME_IMPROVEMENT = "HOME_IMPROVEMENT"
    MEDICAL = "MEDICAL"
    PERSONAL_CARE = "PERSONAL_CARE"
    GENERAL_SERVICES = "GENERAL_SERVICES"
    GOVERNMENT_AND_NON_PROFIT = "GOVERNMENT_AND_NON_PROFIT"
    TRANSPORTATION = "TRANSPORTATION"
    TRAVEL = "TRAVEL"
    RENT_AND_UTILITIES = "RENT_AND_UTILITIES"


class TransactionSubcategory(str, Enum):
    # Income subcategories
    INCOME_DIVIDENDS = "INCOME_DIVIDENDS"
    INCOME_INTEREST_EARNED = "INCOME_INTEREST_EARNED"
    INCOME_RETIREMENT_PENSION = "INCOME_RETIREMENT_PENSION"
    INCOME_TAX_REFUND = "INCOME_TAX_REFUND"
    INCOME_UNEMPLOYMENT = "INCOME_UNEMPLOYMENT"
    INCOME_WAGES = "INCOME_WAGES"
    INCOME_OTHER_INCOME = "INCOME_OTHER_INCOME"

    # Transfer In subcategories
    TRANSFER_IN_CASH_ADVANCES_AND_LOANS = "TRANSFER_IN_CASH_ADVANCES_AND_LOANS"
    TRANSFER_IN_DEPOSIT = "TRANSFER_IN_DEPOSIT"
    TRANSFER_IN_INVESTMENT_AND_RETIREMENT_FUNDS = (
        "TRANSFER_IN_INVESTMENT_AND_RETIREMENT_FUNDS"
    )
    TRANSFER_IN_SAVINGS = "TRANSFER_IN_SAVINGS"
    TRANSFER_IN_ACCOUNT_TRANSFER = "TRANSFER_IN_ACCOUNT_TRANSFER"
    TRANSFER_IN_OTHER_TRANSFER_IN = "TRANSFER_IN_OTHER_TRANSFER_IN"

    # Transfer Out subcategories
    TRANSFER_OUT_INVESTMENT_AND_RETIREMENT_FUNDS = (
        "TRANSFER_OUT_INVESTMENT_AND_RETIREMENT_FUNDS"
    )
    TRANSFER_OUT_SAVINGS = "TRANSFER_OUT_SAVINGS"
    TRANSFER_OUT_WITHDRAWAL = "TRANSFER_OUT_WITHDRAWAL"
    TRANSFER_OUT_ACCOUNT_TRANSFER = "TRANSFER_OUT_ACCOUNT_TRANSFER"
    TRANSFER_OUT_OTHER_TRANSFER_OUT = "TRANSFER_OUT_OTHER_TRANSFER_OUT"

    # Loan Payments subcategories
    LOAN_PAYMENTS_CAR_PAYMENT = "LOAN_PAYMENTS_CAR_PAYMENT"
    LOAN_PAYMENTS_CREDIT_CARD_PAYMENT = "LOAN_PAYMENTS_CREDIT_CARD_PAYMENT"
    LOAN_PAYMENTS_PERSONAL_LOAN_PAYMENT = "LOAN_PAYMENTS_PERSONAL_LOAN_PAYMENT"
    LOAN_PAYMENTS_MORTGAGE_PAYMENT = "LOAN_PAYMENTS_MORTGAGE_PAYMENT"
    LOAN_PAYMENTS_STUDENT_LOAN_PAYMENT = "LOAN_PAYMENTS_STUDENT_LOAN_PAYMENT"
    LOAN_PAYMENTS_OTHER_PAYMENT = "LOAN_PAYMENTS_OTHER_PAYMENT"

    # Bank Fees subcategories
    BANK_FEES_ATM_FEES = "BANK_FEES_ATM_FEES"
    BANK_FEES_FOREIGN_TRANSACTION_FEES = "BANK_FEES_FOREIGN_TRANSACTION_FEES"
    BANK_FEES_INSUFFICIENT_FUNDS = "BANK_FEES_INSUFFICIENT_FUNDS"
    BANK_FEES_INTEREST_CHARGE = "BANK_FEES_INTEREST_CHARGE"
    BANK_FEES_OVERDRAFT_FEES = "BANK_FEES_OVERDRAFT_FEES"
    BANK_FEES_OTHER_BANK_FEES = "BANK_FEES_OTHER_BANK_FEES"

    # Entertainment subcategories
    ENTERTAINMENT_CASINOS_AND_GAMBLING = "ENTERTAINMENT_CASINOS_AND_GAMBLING"
    ENTERTAINMENT_MUSIC_AND_AUDIO = "ENTERTAINMENT_MUSIC_AND_AUDIO"
    ENTERTAINMENT_SPORTING_EVENTS_AMUSEMENT_PARKS_AND_MUSEUMS = (
        "ENTERTAINMENT_SPORTING_EVENTS_AMUSEMENT_PARKS_AND_MUSEUMS"
    )
    ENTERTAINMENT_TV_AND_MOVIES = "ENTERTAINMENT_TV_AND_MOVIES"
    ENTERTAINMENT_VIDEO_GAMES = "ENTERTAINMENT_VIDEO_GAMES"
    ENTERTAINMENT_OTHER_ENTERTAINMENT = "ENTERTAINMENT_OTHER_ENTERTAINMENT"

    # Food and Drink subcategories
    FOOD_AND_DRINK_BEER_WINE_AND_LIQUOR = "FOOD_AND_DRINK_BEER_WINE_AND_LIQUOR"
    FOOD_AND_DRINK_COFFEE = "FOOD_AND_DRINK_COFFEE"
    FOOD_AND_DRINK_FAST_FOOD = "FOOD_AND_DRINK_FAST_FOOD"
    FOOD_AND_DRINK_GROCERIES = "FOOD_AND_DRINK_GROCERIES"
    FOOD_AND_DRINK_RESTAURANT = "FOOD_AND_DRINK_RESTAURANT"
    FOOD_AND_DRINK_VENDING_MACHINES = "FOOD_AND_DRINK_VENDING_MACHINES"
    FOOD_AND_DRINK_OTHER_FOOD_AND_DRINK = "FOOD_AND_DRINK_OTHER_FOOD_AND_DRINK"

    # General Merchandise subcategories
    GENERAL_MERCHANDISE_BOOKSTORES_AND_NEWSSTANDS = (
        "GENERAL_MERCHANDISE_BOOKSTORES_AND_NEWSSTANDS"
    )
    GENERAL_MERCHANDISE_CLOTHING_AND_ACCESSORIES = (
        "GENERAL_MERCHANDISE_CLOTHING_AND_ACCESSORIES"
    )
    GENERAL_MERCHANDISE_CONVENIENCE_STORES = "GENERAL_MERCHANDISE_CONVENIENCE_STORES"
    GENERAL_MERCHANDISE_DEPARTMENT_STORES = "GENERAL_MERCHANDISE_DEPARTMENT_STORES"
    GENERAL_MERCHANDISE_DISCOUNT_STORES = "GENERAL_MERCHANDISE_DISCOUNT_STORES"
    GENERAL_MERCHANDISE_ELECTRONICS = "GENERAL_MERCHANDISE_ELECTRONICS"
    GENERAL_MERCHANDISE_GIFTS_AND_NOVELTIES = "GENERAL_MERCHANDISE_GIFTS_AND_NOVELTIES"
    GENERAL_MERCHANDISE_OFFICE_SUPPLIES = "GENERAL_MERCHANDISE_OFFICE_SUPPLIES"
    GENERAL_MERCHANDISE_ONLINE_MARKETPLACES = "GENERAL_MERCHANDISE_ONLINE_MARKETPLACES"
    GENERAL_MERCHANDISE_PET_SUPPLIES = "GENERAL_MERCHANDISE_PET_SUPPLIES"
    GENERAL_MERCHANDISE_SPORTING_GOODS = "GENERAL_MERCHANDISE_SPORTING_GOODS"
    GENERAL_MERCHANDISE_SUPERSTORES = "GENERAL_MERCHANDISE_SUPERSTORES"
    GENERAL_MERCHANDISE_TOBACCO_AND_VAPE = "GENERAL_MERCHANDISE_TOBACCO_AND_VAPE"
    GENERAL_MERCHANDISE_OTHER_GENERAL_MERCHANDISE = (
        "GENERAL_MERCHANDISE_OTHER_GENERAL_MERCHANDISE"
    )

    # Home Improvement subcategories
    HOME_IMPROVEMENT_FURNITURE = "HOME_IMPROVEMENT_FURNITURE"
    HOME_IMPROVEMENT_HARDWARE = "HOME_IMPROVEMENT_HARDWARE"
    HOME_IMPROVEMENT_REPAIR_AND_MAINTENANCE = "HOME_IMPROVEMENT_REPAIR_AND_MAINTENANCE"
    HOME_IMPROVEMENT_SECURITY = "HOME_IMPROVEMENT_SECURITY"
    HOME_IMPROVEMENT_OTHER_HOME_IMPROVEMENT = "HOME_IMPROVEMENT_OTHER_HOME_IMPROVEMENT"

    # Medical subcategories
    MEDICAL_DENTAL_CARE = "MEDICAL_DENTAL_CARE"
    MEDICAL_EYE_CARE = "MEDICAL_EYE_CARE"
    MEDICAL_NURSING_CARE = "MEDICAL_NURSING_CARE"
    MEDICAL_PHARMACIES_AND_SUPPLEMENTS = "MEDICAL_PHARMACIES_AND_SUPPLEMENTS"
    MEDICAL_PRIMARY_CARE = "MEDICAL_PRIMARY_CARE"
    MEDICAL_VETERINARY_SERVICES = "MEDICAL_VETERINARY_SERVICES"
    MEDICAL_OTHER_MEDICAL = "MEDICAL_OTHER_MEDICAL"

    # Personal Care subcategories
    PERSONAL_CARE_GYMS_AND_FITNESS_CENTERS = "PERSONAL_CARE_GYMS_AND_FITNESS_CENTERS"
    PERSONAL_CARE_HAIR_AND_BEAUTY = "PERSONAL_CARE_HAIR_AND_BEAUTY"
    PERSONAL_CARE_LAUNDRY_AND_DRY_CLEANING = "PERSONAL_CARE_LAUNDRY_AND_DRY_CLEANING"
    PERSONAL_CARE_OTHER_PERSONAL_CARE = "PERSONAL_CARE_OTHER_PERSONAL_CARE"

    # General Services subcategories
    GENERAL_SERVICES_ACCOUNTING_AND_FINANCIAL_PLANNING = (
        "GENERAL_SERVICES_ACCOUNTING_AND_FINANCIAL_PLANNING"
    )
    GENERAL_SERVICES_AUTOMOTIVE = "GENERAL_SERVICES_AUTOMOTIVE"
    GENERAL_SERVICES_CHILDCARE = "GENERAL_SERVICES_CHILDCARE"
    GENERAL_SERVICES_CONSULTING_AND_LEGAL = "GENERAL_SERVICES_CONSULTING_AND_LEGAL"
    GENERAL_SERVICES_EDUCATION = "GENERAL_SERVICES_EDUCATION"
    GENERAL_SERVICES_INSURANCE = "GENERAL_SERVICES_INSURANCE"
    GENERAL_SERVICES_POSTAGE_AND_SHIPPING = "GENERAL_SERVICES_POSTAGE_AND_SHIPPING"
    GENERAL_SERVICES_STORAGE = "GENERAL_SERVICES_STORAGE"
    GENERAL_SERVICES_OTHER_GENERAL_SERVICES = "GENERAL_SERVICES_OTHER_GENERAL_SERVICES"

    # Government and Non-Profit subcategories
    GOVERNMENT_AND_NON_PROFIT_DONATIONS = "GOVERNMENT_AND_NON_PROFIT_DONATIONS"
    GOVERNMENT_AND_NON_PROFIT_GOVERNMENT_DEPARTMENTS_AND_AGENCIES = (
        "GOVERNMENT_AND_NON_PROFIT_GOVERNMENT_DEPARTMENTS_AND_AGENCIES"
    )
    GOVERNMENT_AND_NON_PROFIT_TAX_PAYMENT = "GOVERNMENT_AND_NON_PROFIT_TAX_PAYMENT"
    GOVERNMENT_AND_NON_PROFIT_OTHER_GOVERNMENT_AND_NON_PROFIT = (
        "GOVERNMENT_AND_NON_PROFIT_OTHER_GOVERNMENT_AND_NON_PROFIT"
    )

    # Transportation subcategories
    TRANSPORTATION_BIKES_AND_SCOOTERS = "TRANSPORTATION_BIKES_AND_SCOOTERS"
    TRANSPORTATION_GAS = "TRANSPORTATION_GAS"
    TRANSPORTATION_PARKING = "TRANSPORTATION_PARKING"
    TRANSPORTATION_PUBLIC_TRANSIT = "TRANSPORTATION_PUBLIC_TRANSIT"
    TRANSPORTATION_TAXIS_AND_RIDE_SHARES = "TRANSPORTATION_TAXIS_AND_RIDE_SHARES"
    TRANSPORTATION_TOLLS = "TRANSPORTATION_TOLLS"
    TRANSPORTATION_OTHER_TRANSPORTATION = "TRANSPORTATION_OTHER_TRANSPORTATION"

    # Travel subcategories
    TRAVEL_FLIGHTS = "TRAVEL_FLIGHTS"
    TRAVEL_LODGING = "TRAVEL_LODGING"
    TRAVEL_RENTAL_CARS = "TRAVEL_RENTAL_CARS"
    TRAVEL_OTHER_TRAVEL = "TRAVEL_OTHER_TRAVEL"

    # Rent and Utilities subcategories
    RENT_AND_UTILITIES_GAS_AND_ELECTRICITY = "RENT_AND_UTILITIES_GAS_AND_ELECTRICITY"
    RENT_AND_UTILITIES_INTERNET_AND_CABLE = "RENT_AND_UTILITIES_INTERNET_AND_CABLE"
    RENT_AND_UTILITIES_RENT = "RENT_AND_UTILITIES_RENT"
    RENT_AND_UTILITIES_SEWAGE_AND_WASTE_MANAGEMENT = (
        "RENT_AND_UTILITIES_SEWAGE_AND_WASTE_MANAGEMENT"
    )
    RENT_AND_UTILITIES_TELEPHONE = "RENT_AND_UTILITIES_TELEPHONE"
    RENT_AND_UTILITIES_WATER = "RENT_AND_UTILITIES_WATER"
    RENT_AND_UTILITIES_OTHER_UTILITIES = "RENT_AND_UTILITIES_OTHER_UTILITIES"


class CustomJSONEncoder(JSONEncoder):
    def default(self, obj):
        if isinstance(obj, HttpUrl):
            return str(obj)
        if isinstance(obj, Decimal):
            return float(obj)
        if isinstance(obj, Enum):
            return obj.value  # Convert enum to its value
        return super().default(obj)


def dump_json(name, pydantic_object):
    os.makedirs("jsons", exist_ok=True)  # Create the directory if it doesn't exist
    json_string = json.dumps(
        pydantic_object.model_dump(), cls=CustomJSONEncoder, indent=4
    )
    with open(f"jsons/{name}.json", "w") as f:
        f.write(json_string)


class CountryCode(str, Enum):
    GB = "GB"
    US = "US"
    DE = "DE"
    FR = "FR"
    IT = "IT"
    ES = "ES"
    NL = "NL"
    BE = "BE"
    IE = "IE"
    DK = "DK"
    SE = "SE"
    NO = "NO"
    FI = "FI"
    PT = "PT"
    AT = "AT"
    CH = "CH"


class CountryName(str, Enum):
    UNITED_KINGDOM = "United Kingdom"
    UNITED_STATES = "United States"
    GERMANY = "Germany"
    FRANCE = "France"
    ITALY = "Italy"
    SPAIN = "Spain"
    NETHERLANDS = "Netherlands"
    BELGIUM = "Belgium"
    IRELAND = "Ireland"
    DENMARK = "Denmark"
    SWEDEN = "Sweden"
    NORWAY = "Norway"
    FINLAND = "Finland"
    PORTUGAL = "Portugal"
    AUSTRIA = "Austria"
    SWITZERLAND = "Switzerland"


class Address(BaseModel):
    address_line_1: AddressLineStr
    address_line_2: Optional[AddressLineStr] = None
    city: CityStr
    postcode: PostcodeStr
    country_name: CountryName
    country_code: CountryCode


class SubscriptionStatus(str, Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    TRIALING = "TRIALING"
    CANCELLED = "CANCELLED"


class SubscriptionPlan(str, Enum):
    BASIC = "BASIC"
    PREMIUM = "PREMIUM"
    ENTERPRISE = "ENTERPRISE"


class Currency(str, Enum):
    USD = "USD"
    GBP = "GBP"
    EUR = "EUR"


class MonetaryAmount(BaseModel):
    """Amount with currency"""

    amount: NonNegativeInt
    currency: Currency

    @property
    def decimal_places(self) -> int:
        if self.currency == Currency.GBP:
            return 2
        return 0

    @property
    def decimal_amount(self) -> float:
        return float(self.amount) / 10**self.decimal_places

    model_config = ConfigDict(
        json_schema_extra={"examples": [{"amount": 10000, "currency": "GBP"}]}
    )
